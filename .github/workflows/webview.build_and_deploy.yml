name: 🚗 [Webview] Build and Deploy

on:
  workflow_call:
    secrets:
      CLOUDFLARE_API_TOKEN:
        required: true
      CLOUDFLARE_ACCOUNT_ID:
        required: true
    inputs:
      CLOUDFLARE_PROJECT_NAME:
        type: string
      CLOUDFLARE_BRANCH_TARGET:
        type: string

env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Version Name
        uses: actions/github-script@v6
        id: version
        with:
          result-encoding: string
          script: |
            const timeZoneOffset = 9 * 60 * 60 * 1000;
            const yyyymmddhhmm = new Date(Date.now() + timeZoneOffset).toISOString().replace(/[^0-9]/g, '').slice(0, -5);
            return yyyymmddhhmm;
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: create tag
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git tag -a -f ${{ steps.version.outputs.result }} -m "Release ${{ steps.version.outputs.result }}"
          git push -f origin ${{ steps.version.outputs.result }}
      - name: create release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ steps.version.outputs.result }}
          name: "${{ steps.version.outputs.result }} 배포"
          generateReleaseNotes: true
          omitBodyDuringUpdate: true

  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🥕 Checkout Repository
        uses: actions/checkout@v4
      - name: 📦 Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://npm.pkg.github.com/"
          always-auth: true
      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9
          run_install: false
      - name: 💸 Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: 💸 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-v9-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-v9
      - name: 📦 Install node modules
        run: pnpm install
        if: steps.pnpm-cache.outputs.cache-hit != 'true'
      - name: 🛫 Build application
        id: build_output
        run: pnpm build
      -
